import logging
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from core import bot
from database import get_session, PriceAlert
from services.price_service import price_service
from sqlalchemy import select

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

def setup(bot_instance):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞."""
    global bot
    bot = bot_instance
    schedule_alerts_check(scheduler)

async def check_alerts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã."""
    try:
        logger.info("Checking alerts...")
        session = get_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
            alerts = session.query(PriceAlert).filter(PriceAlert.is_active == True).all()
            
            for alert in alerts:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    current_price = await price_service.get_current_price(alert.symbol)
                    
                    if current_price is None:
                        logger.warning(f"Could not get price for {alert.symbol}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
                    if alert.condition == "above" and current_price >= alert.price:
                        message = f"üîî –¶–µ–Ω–∞ {alert.symbol} –ø–æ–¥–Ω—è–ª–∞—Å—å –≤—ã—à–µ {alert.price:.2f}! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}"
                        alert.is_active = False
                        
                    elif alert.condition == "below" and current_price <= alert.price:
                        message = f"üîî –¶–µ–Ω–∞ {alert.symbol} –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –Ω–∏–∂–µ {alert.price:.2f}! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}"
                        alert.is_active = False
                    
                    # –ï—Å–ª–∏ –∞–ª–µ—Ä—Ç —Å—Ä–∞–±–æ—Ç–∞–ª
                    if not alert.is_active:
                        alert.triggered_at = datetime.utcnow()
                        session.commit()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await bot.send_message(
                            chat_id=alert.user.telegram_id,
                            text=message
                        )
                        logger.info(f"Alert triggered and notification sent: {message}")
                        
                except Exception as e:
                    logger.error(f"Error processing alert {alert.id}: {e}")
                    continue
                    
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"Error checking alerts: {e}")

def schedule_alerts_check(scheduler):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∞–ª–µ—Ä—Ç–æ–≤."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        scheduler.add_job(
            check_alerts,
            'interval',
            minutes=5,
            id='check_alerts'
        )
        logger.info("Alerts check scheduled")
        
    except Exception as e:
        logger.error(f"Error scheduling alerts check: {e}")

async def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    scheduler.start() 