from typing import Dict
from services.market_data import MarketData
from services.cache_manager import cache
from services.blockchain_stats import BlockchainStats
from services.macro_data import MacroData
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

async def generate_report() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä—ã–Ω–∫–µ."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"daily_report_{datetime.utcnow().strftime('%Y-%m-%d_%H')}"
        cached_report = cache.get(cache_key)
        if cached_report:
            return cached_report
        
        market = MarketData()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –æ–±—ä–µ–º–∞—Ö
        volumes = await market.get_market_volume()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
        trends = await market.get_trending_coins()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–º–∞—Ö
        report += "üí∞ –¢–æ–ø –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ (24—á):\n"
        for coin_id, data in volumes.items():
            report += f"‚Ä¢ {data['symbol']}: ${data['volume']:,.0f}\n"
            report += f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {data['change']:+.1f}%\n"
        
        report += "\nüî• –¢—Ä–µ–Ω–¥—ã:\n"
        report += trends
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 1 —á–∞—Å
        cache.set(cache_key, report, expire_minutes=60)
        
        return report
        
    except Exception as e:
        logger.error(f"Error generating report: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def generate_detailed_report() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä—ã–Ω–∫–µ —Å –±–ª–æ–∫—á–µ–π–Ω-–º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –º–∞–∫—Ä–æ–¥–∞–Ω–Ω—ã–º–∏."""
    try:
        cache_key = f"detailed_report_{datetime.utcnow().strftime('%Y-%m-%d_%H')}"
        cached_report = cache.get(cache_key)
        if cached_report:
            return cached_report
            
        market = MarketData()
        blockchain = BlockchainStats()
        macro = MacroData()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        volumes = await market.get_market_volume()
        trends = await market.get_trending_coins()
        chain_stats = await blockchain.get_network_stats()
        macro_data = await macro.get_market_indicators()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        report = "üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç\n\n"
        
        # –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤
        report += "üí∞ –¢–æ–ø –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ (24—á):\n"
        for coin_id, data in volumes.items():
            report += f"‚Ä¢ {data['symbol']}: ${data['volume']:,.0f}\n"
            report += f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {data['change']:+.1f}%\n"
        
        # –¢—Ä–µ–Ω–¥—ã
        report += "\nüî• –¢—Ä–µ–Ω–¥—ã:\n"
        report += trends
        
        # –ë–ª–æ–∫—á–µ–π–Ω-–º–µ—Ç—Ä–∏–∫–∏
        report += "\n‚õì –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
        report += chain_stats
        
        # –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        report += "\nüåç –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞:\n"
        report += macro_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 1 —á–∞—Å
        cache.set(cache_key, report, expire_minutes=60)
        
        return report
        
    except Exception as e:
        logger.error(f"Error generating detailed report: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." 