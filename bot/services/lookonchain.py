import requests
from typing import List, Dict
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
from utils import load_from_cache, save_to_cache

class LookOnChainParser:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
    
    def get_whale_moves(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä—É–ø–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Å LookOnChain."""
        cache_key = 'whale_moves'
        cached_data = load_from_cache(cache_key)
        if cached_data:
            return cached_data
            
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ Twitter API –∏–ª–∏ Telegram API
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            moves = [
                {
                    'time': datetime.now() - timedelta(hours=1),
                    'type': 'transfer',
                    'amount': 1000,
                    'token': 'BTC',
                    'from_address': '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
                    'to_address': '3D2oetdNuZUqQHPJmcMDDHYoqkyNVsFk9r',
                    'source': 'Binance'
                },
                {
                    'time': datetime.now() - timedelta(hours=2),
                    'type': 'deposit',
                    'amount': 5000,
                    'token': 'ETH',
                    'from_address': '0x742d35Cc6634C0532925a3b844Bc454e4438f44e',
                    'to_address': 'Binance',
                    'source': 'Unknown Wallet'
                }
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
            save_to_cache(cache_key, moves, expire_minutes=5)
            return moves
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∏—Ç–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π: {e}")
            return []
    
    def format_whale_alert(self, move: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫–∏—Ç–æ–≤."""
        if move['type'] == 'transfer':
            return (
                f"üêã –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {move['amount']} {move['token']}\n"
                f"–û—Ç: {move['from_address'][:8]}...\n"
                f"–ö: {move['to_address'][:8]}...\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {move['source']}"
            )
        elif move['type'] == 'deposit':
            return (
                f"üì• –î–µ–ø–æ–∑–∏—Ç {move['amount']} {move['token']}\n"
                f"–û—Ç: {move['from_address'][:8]}...\n"
                f"–ù–∞ –±–∏—Ä–∂—É: {move['to_address']}"
            )
        else:
            return (
                f"üí∞ –î–≤–∏–∂–µ–Ω–∏–µ {move['amount']} {move['token']}\n"
                f"–î–µ—Ç–∞–ª–∏: {move['from_address']} ‚Üí {move['to_address']}"
            )

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
lookonchain_parser = LookOnChainParser() 