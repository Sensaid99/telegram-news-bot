from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.market_data import MarketData
from services.macro_data import MacroData
import logging

logger = logging.getLogger(__name__)
router = Router()

def format_price_change(change: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —ç–º–æ–¥–∑–∏."""
    if change > 0:
        return f"üü¢ +{change:.2f}%"
    elif change < 0:
        return f"üî¥ {change:.2f}%"
    return f"‚ö™Ô∏è {change:.2f}%"

def format_volume_change(change: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ —Å —ç–º–æ–¥–∑–∏."""
    if change > 0:
        return f"üìà +{change:.2f}%"
    elif change < 0:
        return f"üìâ {change:.2f}%"
    return f"‚û°Ô∏è {change:.2f}%"

def format_volume_share(share: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–ª—é –æ–±—ä–µ–º–∞ —Å —ç–º–æ–¥–∑–∏."""
    if share > 20:
        return f"üî• {share:.1f}%"
    elif share > 10:
        return f"üí´ {share:.1f}%"
    elif share > 5:
        return f"‚ú® {share:.1f}%"
    return f"üíß {share:.1f}%"

@router.callback_query(lambda c: c.data == "menu_market")
async def show_market_analysis(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
    try:
        market = MarketData()
        macro = MacroData()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        volume_data = await market.get_market_volume()
        trends = await market.get_trending_coins()
        market_state = await macro.get_market_state()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        text = "üìä –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
        text += f"üåç –†—ã–Ω–æ–∫: {market_state['state']}\n"
        text += f"üìà –¢—Ä–µ–Ω–¥: {market_state['trend']}\n"
        text += f"‚ö°Ô∏è –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market_state['volatility']}\n\n"
        
        # –¢–æ–ø-5 –ø–æ –æ–±—ä–µ–º—É
        text += "üíé –¢–æ–ø –æ–±—ä–µ–º–æ–≤ (24—á):\n"
        for i, (symbol, data) in enumerate(list(volume_data.items())[:5], 1):
            price_usdt = data['price']
            price_change = data['price_change']
            volume_change = data['volume_change']
            volume_share = data['volume_share']
            high_24h = data['high_24h']
            low_24h = data['low_24h']
            network = data['network']
            
            text += (
                f"{i}. {symbol}/USDT ({network})\n"
                f"   üí∞ –¶–µ–Ω–∞: ${price_usdt:,.2f}\n"
                f"   üìä 24—á: {format_price_change(price_change)}\n"
                f"   üìà –û–±—ä–µ–º: ${data['volume']:,.0f}\n"
                f"   üí´ –î–æ–ª—è –æ–±—ä–µ–º–∞: {format_volume_share(volume_share)}\n"
                f"   üìä 24—á High/Low: ${high_24h:,.2f} / ${low_24h:,.2f}\n\n"
            )
        
        # –¢—Ä–µ–Ω–¥—ã (—Ç–æ–ø-3)
        text += "üî• –¢—Ä–µ–Ω–¥—ã:\n"
        trend_lines = trends.split('\n\n')[:3]
        text += '\n\n'.join(trend_lines)
        
        # –ö–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="market_detailed")
        builder.button(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="market_charts")
        builder.button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in market analysis: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
            .as_markup()
        )

@router.callback_query(lambda c: c.data == "market_detailed")
async def show_detailed_analysis(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
    try:
        market = MarketData()
        macro = MacroData()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        volume_data = await market.get_market_volume()
        market_state = await macro.get_market_state()
        correlations = await macro.get_correlations()
        
        text = "üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\n\n"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
        text += f"üåç –°–æ—Å—Ç–æ—è–Ω–∏–µ: {market_state['state']}\n"
        text += f"üìà –¢—Ä–µ–Ω–¥: {market_state['trend']}\n"
        text += f"‚ö°Ô∏è –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market_state['volatility']}\n"
        text += f"üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {market_state['liquidity']}\n\n"
        
        # –û–±—ä–µ–º—ã –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
        text += "üíé –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ (24—á):\n"
        for symbol, data in volume_data.items():
            price_usdt = data['price']
            price_change = data['price_change']
            volume_change = data['volume_change']
            volume_share = data['volume_share']
            high_24h = data['high_24h']
            low_24h = data['low_24h']
            network = data['network']
            
            text += (
                f"‚Ä¢ {symbol}/USDT ({network})\n"
                f"  üí∞ –¶–µ–Ω–∞: ${price_usdt:,.2f}\n"
                f"  üìä 24—á: {format_price_change(price_change)}\n"
                f"  üìà –û–±—ä–µ–º: ${data['volume']:,.0f}\n"
                f"  üí´ –î–æ–ª—è –æ–±—ä–µ–º–∞: {format_volume_share(volume_share)}\n"
                f"  üìä 24—á High/Low: ${high_24h:,.2f} / ${low_24h:,.2f}\n\n"
            )
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        text += "üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:\n"
        text += f"‚Ä¢ BTC-ETH: {correlations['btc_eth']}\n"
        text += f"‚Ä¢ –ö—Ä–∏–ø—Ç–æ-S&P500: {correlations['crypto_sp500']}\n"
        text += f"‚Ä¢ –ö—Ä–∏–ø—Ç–æ-Gold: {correlations['crypto_gold']}\n"
        
        # –ö–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_market")
        builder.button(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="market_charts")
        builder.adjust(2)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in detailed market analysis: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_market")
            .as_markup()
        )

@router.callback_query(lambda c: c.data == "market_charts")
async def show_market_charts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ —Ä—ã–Ω–∫–∞."""
    try:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        builder = InlineKeyboardBuilder()
        builder.button(text="BTC/USDT", callback_data="chart_BTCUSDT")
        builder.button(text="ETH/USDT", callback_data="chart_ETHUSDT")
        builder.button(text="SOL/USDT", callback_data="chart_SOLUSDT")
        builder.button(text="BNB/USDT", callback_data="chart_BNBUSDT")
        builder.button(text="TRX/USDT", callback_data="chart_TRXUSDT")
        builder.button(text="TON/USDT", callback_data="chart_TONUSDT")
        builder.button(text="XRP/USDT", callback_data="chart_XRPUSDT")
        builder.button(text="SUI/USDT", callback_data="chart_SUIUSDT")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_market")
        builder.adjust(2, 2, 2, 2, 1)
        
        await callback.message.edit_text(
            "üìà –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing market charts: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_market")
            .as_markup()
        ) 