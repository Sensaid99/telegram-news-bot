import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message
from database import get_session, PriceAlert, User

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("alerts"))
async def cmd_alerts(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏."""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç", callback_data="alert_create")
    builder.button(text="üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="alert_list")
    builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="alert_delete")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(2)
    
    await message.answer(
        "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(lambda c: c.data == "alert_create")
async def create_alert(callback: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞."""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    builder.button(text="Bitcoin (BTC)", callback_data="alert_coin_btc")
    builder.button(text="Ethereum (ETH)", callback_data="alert_coin_eth")
    builder.button(text="Solana (SOL)", callback_data="alert_coin_sol")
    builder.button(text="BNB", callback_data="alert_coin_bnb")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_alerts")
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(2)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∞–ª–µ—Ä—Ç–∞:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(lambda c: c.data.startswith("alert_coin_"))
async def select_condition(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–∞."""
    coin = callback.data.split("_")[-1].upper()
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–í—ã—à–µ —Ü–µ–Ω—ã", callback_data=f"alert_condition_above_{coin}")
    builder.button(text="–ù–∏–∂–µ —Ü–µ–Ω—ã", callback_data=f"alert_condition_below_{coin}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="alert_create")
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è {coin}:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(lambda c: c.data.startswith("alert_condition_"))
async def enter_price(callback: types.CallbackQuery):
    """–í–≤–æ–¥ —Ü–µ–Ω—ã –¥–ª—è –∞–ª–µ—Ä—Ç–∞."""
    parts = callback.data.split("_")
    condition = parts[2]
    coin = parts[3].upper()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = {
        "coin": coin,
        "condition": condition
    }
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è {coin} (–≤ USD):\n"
        f"–ê–ª–µ—Ä—Ç —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –±—É–¥–µ—Ç {'–≤—ã—à–µ' if condition == 'above' else '–Ω–∏–∂–µ'} —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."
    )

@router.message(lambda message: message.text and message.text.replace(".", "").isdigit())
async def save_alert(message: Message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞."""
    try:
        price = float(message.text)
        session = get_session()
        
        try:
            user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
            if not user:
                await message.reply("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–ª–µ—Ä—Ç
            alert = PriceAlert(
                user_id=user.id,
                symbol="BTC",  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É
                condition="above",  # –ò –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
                price=price,
                is_active=True
            )
            
            session.add(alert)
            session.commit()
            
            await message.reply(
                f"‚úÖ –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ú–æ–Ω–µ—Ç–∞: {alert.symbol}\n"
                f"–£—Å–ª–æ–≤–∏–µ: {'–≤—ã—à–µ' if alert.condition == 'above' else '–Ω–∏–∂–µ'} ${alert.price:,.2f}"
            )
            
        finally:
            session.close()
            
    except ValueError:
        await message.reply("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"Error saving alert: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞.") 