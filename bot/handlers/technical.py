from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from ..services.technical_analysis import TechnicalAnalysis
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda c: c.data == "menu_technical")
async def show_technical_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text="BTC/USDT", callback_data="ta_btc")
        builder.button(text="ETH/USDT", callback_data="ta_eth")
        builder.button(text="BNB/USDT", callback_data="ta_bnb")
        builder.button(text="SOL/USDT", callback_data="ta_sol")
        builder.button(text="XRP/USDT", callback_data="ta_xrp")
        builder.button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
        builder.adjust(2, 2, 2)
        
        await callback.message.edit_text(
            "üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in technical menu: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
            .as_markup()
        )

@router.callback_query(lambda c: c.data.startswith("ta_"))
async def show_technical_analysis(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã."""
    try:
        symbol = callback.data.split("_")[1].upper()
        await callback.answer(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...")
        
        ta = TechnicalAnalysis()
        analysis = await ta.get_analysis(f"{symbol}/USDT")
        
        text = f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {symbol}/USDT\n\n"
        
        # –¢—Ä–µ–Ω–¥—ã
        text += "üìà –¢—Ä–µ–Ω–¥—ã:\n"
        text += f"‚Ä¢ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π (H4): {analysis['trends']['short']}\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π (D): {analysis['trends']['medium']}\n"
        text += f"‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π (W): {analysis['trends']['long']}\n\n"
        
        # –£—Ä–æ–≤–Ω–∏
        text += "üéØ –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏:\n"
        text += f"‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${analysis['levels']['resistance']:,.2f}\n"
        text += f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${analysis['levels']['support']:,.2f}\n\n"
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        text += "üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:\n"
        text += f"‚Ä¢ RSI (14): {analysis['indicators']['rsi']}\n"
        text += f"‚Ä¢ MACD: {analysis['indicators']['macd']}\n"
        text += f"‚Ä¢ MA (50/200): {analysis['indicators']['moving_averages']}\n"
        text += f"‚Ä¢ Bollinger: {analysis['indicators']['bollinger']}\n\n"
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
        text += "üîç –ü–∞—Ç—Ç–µ—Ä–Ω—ã:\n"
        for pattern in analysis['patterns']:
            text += f"‚Ä¢ {pattern}\n"
        text += "\n"
        
        # –û–±—ä–µ–º—ã
        text += "üìä –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤:\n"
        text += f"‚Ä¢ OBV: {analysis['volume']['obv']}\n"
        text += f"‚Ä¢ Volume Profile: {analysis['volume']['profile']}\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        text += f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['recommendation']}\n"
        text += f"‚ö†Ô∏è –†–∏—Å–∫: {analysis['risk']}"
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        builder = InlineKeyboardBuilder()
        builder.button(text="5m", callback_data=f"timeframe_{symbol.lower()}_5m")
        builder.button(text="15m", callback_data=f"timeframe_{symbol.lower()}_15m")
        builder.button(text="1H", callback_data=f"timeframe_{symbol.lower()}_1h")
        builder.button(text="4H", callback_data=f"timeframe_{symbol.lower()}_4h")
        builder.button(text="1D", callback_data=f"timeframe_{symbol.lower()}_1d")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_technical")
        builder.adjust(5, 1)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in technical analysis: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_technical")
            .as_markup()
        )

@router.callback_query(lambda c: c.data.startswith("timeframe_"))
async def change_timeframe(callback: types.CallbackQuery):
    """–ú–µ–Ω—è–µ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        _, symbol, timeframe = callback.data.split("_")
        await callback.answer(f"–û–±–Ω–æ–≤–ª—è—é –¥–ª—è {timeframe}...")
        
        ta = TechnicalAnalysis()
        analysis = await ta.get_analysis(f"{symbol.upper()}/USDT", timeframe)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º
        text = f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {symbol.upper()}/USDT ({timeframe})\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ –∞–Ω–∞–ª–∏–∑, –Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        text += "üìà –¢—Ä–µ–Ω–¥—ã:\n"
        text += f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: {analysis['trends']['current']}\n"
        text += f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {analysis['trends']['strength']}\n\n"
        
        text += "üéØ –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏:\n"
        text += f"‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${analysis['levels']['resistance']:,.2f}\n"
        text += f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${analysis['levels']['support']:,.2f}\n\n"
        
        text += "üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:\n"
        text += f"‚Ä¢ RSI (14): {analysis['indicators']['rsi']}\n"
        text += f"‚Ä¢ MACD: {analysis['indicators']['macd']}\n"
        text += f"‚Ä¢ MA (50/200): {analysis['indicators']['moving_averages']}\n"
        text += f"‚Ä¢ Bollinger: {analysis['indicators']['bollinger']}\n\n"
        
        text += "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:\n"
        for pattern in analysis['patterns']:
            text += f"‚Ä¢ {pattern}\n"
        text += "\n"
        
        text += f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['recommendation']}\n"
        text += f"‚ö†Ô∏è –†–∏—Å–∫: {analysis['risk']}"
        
        # –¢–µ –∂–µ –∫–Ω–æ–ø–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        builder = InlineKeyboardBuilder()
        builder.button(text="5m", callback_data=f"timeframe_{symbol}_5m")
        builder.button(text="15m", callback_data=f"timeframe_{symbol}_15m")
        builder.button(text="1H", callback_data=f"timeframe_{symbol}_1h")
        builder.button(text="4H", callback_data=f"timeframe_{symbol}_4h")
        builder.button(text="1D", callback_data=f"timeframe_{symbol}_1d")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"ta_{symbol}")
        builder.adjust(5, 1)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error changing timeframe: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"ta_{symbol}")
            .as_markup()
        ) 