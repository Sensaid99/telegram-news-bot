import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from database import get_session, User

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

def get_main_menu() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    builder = InlineKeyboardBuilder()
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    builder.button(text="üìä –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="menu_market")
    builder.button(text="‚ö°Ô∏è –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="menu_crypto")
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –ú–∞–∫—Ä–æ –∏ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    builder.button(text="üåç –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="menu_macro")
    builder.button(text="üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", callback_data="menu_technical")
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –ù–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    builder.button(text="üêã –ö–∏—Ç—ã", callback_data="menu_whales")
    builder.button(text="üìÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="menu_calendar")
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–º–æ—â—å
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
    builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="menu_help")
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    builder.adjust(2, 2, 2, 2)
    return builder.as_markup()

def get_market_menu() -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç", callback_data="market_daily")
    builder.button(text="üí∞ –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤", callback_data="market_volume")
    builder.button(text="üîÑ –¢—Ä–µ–Ω–¥—ã", callback_data="market_trends")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    builder.adjust(2)
    return builder

def get_whale_menu() -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–æ–≤."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚Çø Bitcoin", callback_data="whale_btc")
    builder.button(text="Œû Ethereum", callback_data="whale_eth")
    builder.button(text="‚ö°Ô∏è Solana", callback_data="whale_sol")
    builder.button(text="üü° BNB", callback_data="whale_bnb")
    builder.button(text="üîç –î—Ä—É–≥–∏–µ —Å–µ—Ç–∏", callback_data="whale_other")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    builder.adjust(2)
    return builder

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        logger.info(f"Received /start command from user {message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = get_session()
        user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if user:
            logger.info(f"Existing user returned: {message.from_user.id}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            session.add(user)
            session.commit()
            logger.info(f"New user registered: {message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"Sending welcome message to user {message.from_user.id}")
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "–Ø - QuantNews Bot, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞.\n\n"
            "üî• –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:\n"
            "‚Ä¢ üêã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ üìÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n"
            "‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

@router.callback_query(F.data.startswith("menu_"))
async def handle_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    section = callback.data.split("_")[1]
    
    try:
        if section == "whales":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–æ–≤
            await callback.message.edit_text(
                "üêã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –∏–ª–∏ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=get_whale_menu().as_markup()
            )
            
        elif section == "calendar":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar = await macro_calendar.get_daily_summary()
            await callback.message.edit_text(
                calendar,
                reply_markup=get_main_menu()
            )
            
        elif section == "market":
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            await callback.message.edit_text(
                "üìä –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=get_market_menu().as_markup()
            )
            
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é ...
        
    except Exception as e:
        logger.error(f"Error in menu handler: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_main_menu()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
@router.callback_query(lambda c: c.data == "menu_market")
async def market_menu(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç", callback_data="market_daily")
    builder.button(text="üí∞ –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤", callback_data="market_volume")
    builder.button(text="üîÑ –¢—Ä–µ–Ω–¥—ã", callback_data="market_trends")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üìä –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
@router.callback_query(lambda c: c.data == "menu_crypto")
async def crypto_menu(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚Çø Bitcoin", callback_data="crypto_btc")
    builder.button(text="Œû Ethereum", callback_data="crypto_eth")
    builder.button(text="‚ö°Ô∏è Solana", callback_data="crypto_sol")
    builder.button(text="üü° BNB", callback_data="crypto_bnb")
    builder.button(text="üîç –î—Ä—É–≥–∏–µ", callback_data="crypto_other")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "‚ö°Ô∏è –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∏
@router.callback_query(lambda c: c.data == "menu_macro")
async def macro_menu(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üíµ DXY", callback_data="macro_dxy")
    builder.button(text="üìà S&P 500", callback_data="macro_sp500")
    builder.button(text="üìâ VIX", callback_data="macro_vix")
    builder.button(text="üî∏ Gold", callback_data="macro_gold")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üåç –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(lambda c: c.data == "menu_main")
async def return_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu()
    )

def get_start_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–≤–æ–¥–∫–∞")],
            [KeyboardButton(text="‚ö°Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã")],
            [KeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard 