import os
import logging
from dotenv import load_dotenv
import importlib.util
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env –∏–ª–∏ env_example.py"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env
    logger.info("Trying to load configuration from .env...")
    load_dotenv(verbose=True)
    
    # –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ env_example.py
    if not all(os.getenv(key) for key in ['BOT_TOKEN', 'CHANNEL_ID']):
        logger.info("Some variables missing in .env, trying env_example.py...")
        try:
            spec = importlib.util.spec_from_file_location("env_example", "env_example.py")
            env_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(env_module)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –º–æ–¥—É–ª—è –≤ os.environ
            for key in dir(env_module):
                if not key.startswith('__'):
                    value = getattr(env_module, key)
                    if isinstance(value, str):
                        os.environ[key] = value
            logger.info("‚úÖ Configuration loaded from env_example.py")
        except Exception as e:
            logger.error(f"‚ùå Failed to load env_example.py: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_config()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_keys = [
    'BOT_TOKEN',
    'CHANNEL_ID',
    'ETHERSCAN_API_KEY',
    'BSCSCAN_API_KEY',
    'SOLSCAN_API_KEY',
    'TRONGRID_API_KEY',
    'INVESTING_API_KEY',
    'BINANCE_API_KEY',
    'BINANCE_API_SECRET',
    'TWELVEDATA_API_KEY'
]

for key in required_keys:
    if os.getenv(key):
        logger.info(f"‚úÖ {key} loaded successfully")
    else:
        logger.warning(f"‚ö†Ô∏è {key} not found")

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment variables")

# Admin Configuration
admin_ids_str = os.getenv('ADMIN_IDS', '')
ADMIN_IDS = [int(id_str) for id_str in admin_ids_str.split(',') if id_str.strip()]
logger.info(f"Admin IDs configured: {ADMIN_IDS}")

# Channel Configuration
CHANNEL_ID = os.getenv('CHANNEL_ID')
logger.info(f"Channel ID configured: {CHANNEL_ID}")

# Database Configuration
DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///db/quantnews.db')
logger.info(f"Using database: {DATABASE_URL}")

# API Keys
ETHERSCAN_API_KEY = os.getenv('ETHERSCAN_API_KEY')
BSCSCAN_API_KEY = os.getenv('BSCSCAN_API_KEY')
SOLSCAN_API_KEY = os.getenv('SOLSCAN_API_KEY')
TRONGRID_API_KEY = os.getenv('TRONGRID_API_KEY')
INVESTING_API_KEY = os.getenv('INVESTING_API_KEY')
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')
TWELVEDATA_API_KEY = os.getenv('TWELVEDATA_API_KEY')

# Scheduler Configuration
DAILY_REPORT_TIME = "09:00"  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (UTC)
MAX_DAILY_POSTS = 6

# Alert Configuration
DEFAULT_ALERT_CHECK_INTERVAL = 5  # minutes
MAX_ALERTS_FREE_TIER = 3
MAX_ALERTS_PREMIUM_TIER = 10

# Content Generation
MIN_POST_INTERVAL = 14400  # 4 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# Subscription prices (in RUB)
SUBSCRIPTION_PRICES = {
    'monthly': 990,
    'quarterly': 2490,
    'yearly': 9990
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
LOG_FILE = os.getenv('LOG_FILE', 'bot.log')

# Whale Tracking
WHALE_THRESHOLD = {
    "BTC": 1000000,  # $1M
    "ETH": 500000,   # $500K
    "BNB": 200000,   # $200K
    "SOL": 100000,   # $100K
    "TRX": 100000,   # $100K
    "SUI": 50000,    # $50K
    "TON": 50000,    # $50K
    "XRP": 100000    # $100K
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_DIR = Path(__file__).resolve().parent
DEBUG = os.getenv("DEBUG", "False").lower() == "true"

# Telegram
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# APIs
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")

# Blockchain APIs
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")
BSCSCAN_API_KEY = os.getenv("BSCSCAN_API_KEY")
SOLSCAN_API_KEY = os.getenv("SOLSCAN_API_KEY")
TRONGRID_API_KEY = os.getenv("TRONGRID_API_KEY")

# Other Services
FOREX_FACTORY_API_KEY = os.getenv("FOREX_FACTORY_API_KEY")
CRYPTOPANIC_API_KEY = os.getenv("CRYPTOPANIC_API_KEY")

# Database
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./bot.db")

# Cache
CACHE_TTL = int(os.getenv("CACHE_TTL", "300"))  # 5 –º–∏–Ω—É—Ç
CACHE_ENABLED = os.getenv("CACHE_ENABLED", "True").lower() == "true"

# Notifications
NOTIFICATION_DELAY = int(os.getenv("NOTIFICATION_DELAY", "60"))  # 1 –º–∏–Ω—É—Ç–∞
MAX_ALERTS_PER_USER = int(os.getenv("MAX_ALERTS_PER_USER", "10"))

# Market Data
UPDATE_INTERVAL = int(os.getenv("UPDATE_INTERVAL", "300"))  # 5 –º–∏–Ω—É—Ç
SUPPORTED_CURRENCIES = [
    "BTC", "ETH", "BNB", "SOL", "XRP", "TRX", "TON", "SUI",
    "USDT", "USDC", "BUSD", "DAI"
]
SUPPORTED_NETWORKS = ["BTC", "ETH", "BSC", "SOL", "XRP", "TRON"]

# Technical Analysis
TA_TIMEFRAMES = ["1m", "5m", "15m", "30m", "1h", "4h", "1d", "1w"]
TA_INDICATORS = ["MA", "EMA", "RSI", "MACD", "BB"]
TA_UPDATE_INTERVAL = int(os.getenv("TA_UPDATE_INTERVAL", "900"))  # 15 –º–∏–Ω—É—Ç

# Whale Tracking
WHALE_THRESHOLD = {
    "BTC": float(os.getenv("WHALE_BTC", "100")),     # 100 BTC
    "ETH": float(os.getenv("WHALE_ETH", "1000")),    # 1000 ETH
    "BNB": float(os.getenv("WHALE_BNB", "5000")),    # 5000 BNB
    "SOL": float(os.getenv("WHALE_SOL", "50000")),   # 50000 SOL
    "XRP": float(os.getenv("WHALE_XRP", "1000000")), # 1M XRP
    "TRX": float(os.getenv("WHALE_TRX", "5000000"))  # 5M TRX
}

# Economic Calendar
CALENDAR_UPDATE_INTERVAL = int(os.getenv("CALENDAR_UPDATE_INTERVAL", "3600"))  # 1 —á–∞—Å
CALENDAR_REGIONS = ["US", "EU", "CN", "JP", "GB"]
CALENDAR_IMPORTANCE = ["high", "medium", "low"]

# User Settings
DEFAULT_CURRENCY = "USD"
DEFAULT_TIMEZONE = "UTC"
DEFAULT_TIME_FORMAT = "24h"
DEFAULT_THEME = "light"

# Logging
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
LOG_FILE = os.path.join(BASE_DIR, "bot.log")

# Security
MAX_REQUESTS_PER_MINUTE = int(os.getenv("MAX_REQUESTS_PER_MINUTE", "60"))
API_TIMEOUT = int(os.getenv("API_TIMEOUT", "30"))  # 30 —Å–µ–∫—É–Ω–¥

# Error Messages
ERROR_MESSAGES = {
    "general": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    "api_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    "not_found": "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
    "invalid_input": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.",
    "rate_limit": "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    "maintenance": "üõ† –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
}

# Success Messages
SUCCESS_MESSAGES = {
    "alert_set": "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
    "alert_removed": "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
    "settings_updated": "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
    "subscription_success": "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞"
}

# Help Messages
HELP_MESSAGES = {
    "start": """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Market Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∫–∏—Ç–æ–≤
‚Ä¢ –ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    """,
    "crypto": """
üí∞ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏:

/p <—Å–∏–º–≤–æ–ª> - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
/v <—Å–∏–º–≤–æ–ª> - –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
/c <—Å–∏–º–≤–æ–ª> - –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
/i <—Å–∏–º–≤–æ–ª> - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–ü—Ä–∏–º–µ—Ä: /p BTC
    """,
    "alerts": """
üîî –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:

/alert_price <—Å–∏–º–≤–æ–ª> <—Ü–µ–Ω–∞> - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ
/alert_volume <—Å–∏–º–≤–æ–ª> <–æ–±—ä–µ–º> - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—ä–µ–º–µ
/alert_whale <—Å–µ—Ç—å> <—Å—É–º–º–∞> - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∏—Ç–µ
/alerts_list - –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/alerts_clear - –û—á–∏—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä: /alert_price BTC 50000
    """,
    "analysis": """
üìä –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:

/market - –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
/macro - –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞
/ta <—Å–∏–º–≤–æ–ª> - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
/whales <—Å–µ—Ç—å> - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤

–ü—Ä–∏–º–µ—Ä: /ta ETH
    """,
    "settings": """
‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:

/currency <–∫–æ–¥> - –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É
/timezone <–∑–æ–Ω–∞> - –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
/format <—Ñ–æ—Ä–º–∞—Ç> - –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
/theme <—Ç–µ–º–∞> - –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É

–ü—Ä–∏–º–µ—Ä: /currency EUR
    """
} 