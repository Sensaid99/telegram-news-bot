import logging
import aiohttp
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
from config import INVESTING_API_KEY
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class MacroCalendar:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º."""
    
    def __init__(self):
        self.base_url = "https://api.forexfactory.com/v1"
        self.api_key = "YOUR_API_KEY"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
    
    async def get_events(self, days: int = 7) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    "api_key": self.api_key,
                    "from_date": datetime.now().strftime("%Y-%m-%d"),
                    "to_date": (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d")
                }
                
                async with session.get(f"{self.base_url}/calendar", params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self._process_events(data)
                    else:
                        logger.error(f"Error fetching events: {response.status}")
                        return []
                        
        except Exception as e:
            logger.error(f"Error in get_events: {e}")
            return []
            
    def _process_events(self, events_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è."""
        processed_events = []
        
        for event in events_data:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫
            impact = self._analyze_impact(event)
            
            processed_events.append({
                "title": event["title"],
                "date": event["date"],
                "time": event["time"],
                "country": event["country"],
                "impact": impact["level"],
                "description": impact["description"],
                "forecast": event.get("forecast", "N/A"),
                "previous": event.get("previous", "N/A"),
                "actual": event.get("actual", "N/A"),
                "url": event.get("url", "")
            })
            
        return processed_events
        
    def _analyze_impact(self, event: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫."""
        impact = {
            "level": "low",
            "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫"
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–ª–∏—è–Ω–∏—è
        high_impact = [
            "fed", "fomc", "interest rate", "powell",
            "inflation", "cpi", "gdp", "unemployment",
            "regulation", "crypto", "bitcoin", "blockchain"
        ]
        
        medium_impact = [
            "treasury", "bonds", "stocks", "forex",
            "trade", "retail", "manufacturing", "housing"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        event_text = f"{event['title']} {event.get('description', '')}".lower()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        high_count = sum(1 for word in high_impact if word in event_text)
        medium_count = sum(1 for word in medium_impact if word in event_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–∏—è–Ω–∏—è
        if high_count > 0:
            impact["level"] = "high"
            impact["description"] = "–°–∏–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫"
        elif medium_count > 0:
            impact["level"] = "medium"
            impact["description"] = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫"
            
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if event.get("importance", "").lower() == "high":
            impact["level"] = "high"
            
        return impact
        
    async def get_important_events(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è."""
        events = await self.get_events()
        return [event for event in events if event["impact"] == "high"]
        
    async def get_events_by_region(self, region: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É."""
        events = await self.get_events()
        return [event for event in events if event["country"].lower() == region.lower()]
        
    async def get_events_by_date(self, date: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    "api_key": self.api_key,
                    "date": date
                }
                
                async with session.get(f"{self.base_url}/calendar/date", params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self._process_events(data)
                    else:
                        logger.error(f"Error fetching events for date {date}: {response.status}")
                        return []
                        
        except Exception as e:
            logger.error(f"Error in get_events_by_date: {e}")
            return []
            
    async def get_market_impact(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ä—ã–Ω–æ–∫."""
        events = await self.get_events(days=7)
        
        impact = {
            "overall": "neutral",
            "short_term": "neutral",
            "long_term": "neutral",
            "key_events": [],
            "recommendations": []
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        high_impact = len([e for e in events if e["impact"] == "high"])
        medium_impact = len([e for e in events if e["impact"] == "medium"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ
        total_weight = high_impact * 2 + medium_impact
        if total_weight > 5:
            impact["overall"] = "high volatility expected"
        elif total_weight > 2:
            impact["overall"] = "moderate volatility expected"
            
        # –í—ã–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        impact["key_events"] = [
            {
                "date": e["date"],
                "title": e["title"],
                "impact": e["impact"],
                "description": e["description"]
            }
            for e in events if e["impact"] == "high"
        ][:3]  # –¢–æ–ø-3 —Å–æ–±—ã—Ç–∏—è
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if impact["overall"] == "high volatility expected":
            impact["recommendations"].append(
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—Å–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏"
            )
        if high_impact > 0:
            impact["recommendations"].append(
                "–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ –¥–∞—Ç—ã –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
            )
            
        return impact

    async def analyze_impact(self, event: dict) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ä—ã–Ω–æ–∫."""
        try:
            impact = ""
            
            # –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è
            if "FED" in event["event"] or "Interest Rate" in event["event"]:
                impact += "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
            elif "GDP" in event["event"] or "NFP" in event["event"]:
                impact += "üü° –í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞
            if event["actual"] and event["forecast"]:
                actual = float(event["actual"].replace("%", ""))
                forecast = float(event["forecast"].replace("%", ""))
                
                if actual > forecast:
                    impact += "üìà –í—ã—à–µ –æ–∂–∏–¥–∞–Ω–∏–π - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç\n"
                elif actual < forecast:
                    impact += "üìâ –ù–∏–∂–µ –æ–∂–∏–¥–∞–Ω–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ\n"
                else:
                    impact += "‚û°Ô∏è –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º\n"
            
            return impact
            
        except Exception as e:
            logger.error(f"Error analyzing event impact: {e}")
            return "‚ùì –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑"

    async def get_daily_summary(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
        try:
            events = await self.get_events(days=1)
            if not events:
                return "–ù–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            
            summary = "üìÖ –í–∞–∂–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
            
            for event in events:
                if event["importance"] in ["High", "Medium"]:
                    impact = await self.analyze_impact(event)
                    summary += f"üïí {event['time']} - {event['country']}\n"
                    summary += f"üìä {event['event']}\n"
                    summary += f"üìå –§–∞–∫—Ç: {event['actual']} | –ü—Ä–æ–≥–Ω–æ–∑: {event['forecast']}\n"
                    summary += f"üîÑ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {event['previous']}\n"
                    summary += f"üìù –í–ª–∏—è–Ω–∏–µ:\n{impact}\n\n"
            
            return summary
            
        except Exception as e:
            logger.error(f"Error generating daily summary: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏" 