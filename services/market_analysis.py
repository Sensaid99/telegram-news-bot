import logging
from typing import Dict, List, Tuple, Any
import numpy as np
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class MarketAnalysis:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π."""
    
    def __init__(self):
        self.market_state = "NEUTRAL"  # BULLISH, NEUTRAL, BEARISH
        self.risk_level = "MEDIUM"     # LOW, MEDIUM, HIGH
        
    def analyze_dxy(self, current: float, previous: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ DXY –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏—è"""
        change = ((current - previous) / previous * 100) if previous else 0
        trend = "‚ÜóÔ∏è" if change > 0 else "‚ÜòÔ∏è" if change < 0 else "‚Üí"
        
        analysis = {
            'value': current,
            'change': change,
            'trend': trend,
            'strength': '—Å–∏–ª—å–Ω—ã–π' if current > 103 else '—Å–ª–∞–±—ã–π' if current < 97 else '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
            'impact': """
‚Ä¢ –°–∏–ª—å–Ω—ã–π –¥–æ–ª–ª–∞—Ä (DXY > 103) –æ–±—ã—á–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–µ–Ω –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞
‚Ä¢ –°–ª–∞–±—ã–π –¥–æ–ª–ª–∞—Ä (DXY < 97) —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ä–æ—Å—Ç—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚Ä¢ –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç DXY –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—Ç—Ç–æ–∫ –∫–∞–ø–∏—Ç–∞–ª–∞ –∏–∑ —Ä–∏—Å–∫–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
            """.strip()
        }
        return analysis
        
    def analyze_sp500(self, current: float, previous: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–∞ S&P 500 –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏"""
        change = ((current - previous) / previous * 100) if previous else 0
        trend = "‚ÜóÔ∏è" if change > 0 else "‚ÜòÔ∏è" if change < 0 else "‚Üí"
        
        analysis = {
            'value': current,
            'change': change,
            'trend': trend,
            'state': '–±—ã—á–∏–π' if current > previous else '–º–µ–¥–≤–µ–∂–∏–π' if current < previous else '–±–æ–∫–æ–≤–æ–π',
            'correlation': """
‚Ä¢ –í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC (> 0.6) –≤ –ø–µ—Ä–∏–æ–¥—ã —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä S&P 500 –∏–º–µ–µ—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
‚Ä¢ –ü–∞–¥–µ–Ω–∏–µ S&P 500 —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞–º –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ
            """.strip()
        }
        return analysis
        
    def analyze_vix(self, current: float, previous: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ VIX"""
        change = ((current - previous) / previous * 100) if previous else 0
        trend = "‚ÜóÔ∏è" if change > 0 else "‚ÜòÔ∏è" if change < 0 else "‚Üí"
        
        analysis = {
            'value': current,
            'change': change,
            'trend': trend,
            'risk_level': '–≤—ã—Å–æ–∫–∏–π' if current > 30 else '–Ω–∏–∑–∫–∏–π' if current < 15 else '—Å—Ä–µ–¥–Ω–∏–π',
            'interpretation': """
‚Ä¢ VIX > 30: –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω–∞ –ø–∞–Ω–∏–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ
‚Ä¢ VIX < 15: –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Ä—ã–Ω–æ–∫ —Å–ø–æ–∫–æ–µ–Ω
‚Ä¢ –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç VIX —á–∞—Å—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ
            """.strip()
        }
        return analysis
        
    def analyze_gold(self, current: float, previous: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å BTC"""
        change = ((current - previous) / previous * 100) if previous else 0
        trend = "‚ÜóÔ∏è" if change > 0 else "‚ÜòÔ∏è" if change < 0 else "‚Üí"
        
        analysis = {
            'value': current,
            'change': change,
            'trend': trend,
            'correlation': """
‚Ä¢ BTC –∏ –∑–æ–ª–æ—Ç–æ —á–∞—Å—Ç–æ —Ä–∞—Å—Ç—É—Ç –≤–º–µ—Å—Ç–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–∏
‚Ä¢ –ó–æ–ª–æ—Ç–æ - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∑–∞—â–∏—Ç–Ω—ã–π –∞–∫—Ç–∏–≤
‚Ä¢ –í –ø–µ—Ä–∏–æ–¥—ã –∫—Ä–∏–∑–∏—Å–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è BTC –∏ –∑–æ–ª–æ—Ç–∞ –º–æ–∂–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å—Å—è
            """.strip()
        }
        return analysis
        
    def analyze_nasdaq(self, current: float, previous: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–∞ NASDAQ –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫"""
        change = ((current - previous) / previous * 100) if previous else 0
        trend = "‚ÜóÔ∏è" if change > 0 else "‚ÜòÔ∏è" if change < 0 else "‚Üí"
        
        analysis = {
            'value': current,
            'change': change,
            'trend': trend,
            'correlation': """
‚Ä¢ –°–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC (> 0.7) –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ–∫—É—Å–∞
‚Ä¢ –û–ø–µ—Ä–µ–∂–∞—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º —Å–µ–∫—Ç–æ—Ä–µ –≤–ª–∏—è—é—Ç –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            """.strip()
        }
        return analysis
        
    def analyze_treasuries(self, y10: float, y2: float, prev_y10: float, prev_y2: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∂–µ—Ä–∏—Å –∏ –∫—Ä–∏–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
        spread = y10 - y2
        prev_spread = prev_y10 - prev_y2
        spread_change = spread - prev_spread
        
        analysis = {
            'y10': y10,
            'y2': y2,
            'spread': spread,
            'trend': "‚ÜóÔ∏è" if spread_change > 0 else "‚ÜòÔ∏è" if spread_change < 0 else "‚Üí",
            'state': '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è' if spread > 0 else '–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
            'interpretation': """
‚Ä¢ –ò–Ω–≤–µ—Ä—Å–∏—è –∫—Ä–∏–≤–æ–π (—Å–ø—Ä–µ–¥ < 0) - —Å–∏–≥–Ω–∞–ª —Ä–µ—Ü–µ—Å—Å–∏–∏
‚Ä¢ –†–æ—Å—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π –Ω–µ–≥–∞—Ç–∏–≤–µ–Ω –¥–ª—è —Ä–∏—Å–∫–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫
            """.strip()
        }
        return analysis
        
    def analyze_crude_oil(self, current: float, previous: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –Ω–µ—Ñ—Ç—å –∏ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∏–Ω—Ñ–ª—è—Ü–∏—é"""
        change = ((current - previous) / previous * 100) if previous else 0
        trend = "‚ÜóÔ∏è" if change > 0 else "‚ÜòÔ∏è" if change < 0 else "‚Üí"
        
        analysis = {
            'value': current,
            'change': change,
            'trend': trend,
            'impact': """
‚Ä¢ –†–æ—Å—Ç —Ü–µ–Ω –Ω–∞ –Ω–µ—Ñ—Ç—å —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –í—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —É–∂–µ—Å—Ç–æ—á–µ–Ω–∏—é –ø–æ–ª–∏—Ç–∏–∫–∏ –¶–ë
‚Ä¢ –ù–µ—Ñ—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
            """.strip()
        }
        return analysis
        
    def analyze_rates(self, rates: Dict[str, float]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è"""
        fed_rate = rates.get('fed', 0)
        
        analysis = {
            'rates': rates,
            'environment': '—É–∂–µ—Å—Ç–æ—á–µ–Ω–∏–µ' if fed_rate > 4 else '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' if fed_rate > 2 else '–º—è–≥–∫–∏–π',
            'impact': """
‚Ä¢ –í—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏ (>4%) –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã –¥–ª—è —Ä–∏—Å–∫–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –û–∂–∏–¥–∞–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –æ–±—ã—á–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞
‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ —Å—Ç–∞–≤–æ–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
            """.strip()
        }
        return analysis
        
    @staticmethod
    def get_market_state(metrics: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫."""
        try:
            bullish_factors = 0
            bearish_factors = 0
            
            # –ê–Ω–∞–ª–∏–∑ DXY
            if metrics['dxy'] < metrics.get('prev_dxy', float('inf')):
                bullish_factors += 1
            else:
                bearish_factors += 1
                
            # –ê–Ω–∞–ª–∏–∑ S&P 500
            if metrics['sp500'] > metrics.get('prev_sp500', 0):
                bullish_factors += 1
            else:
                bearish_factors += 1
                
            # –ê–Ω–∞–ª–∏–∑ VIX
            if metrics['vix'] < 20:
                bullish_factors += 1
            elif metrics['vix'] > 30:
                bearish_factors += 1
                
            # –ê–Ω–∞–ª–∏–∑ Gold
            if metrics['gold'] > metrics.get('prev_gold', 0):
                bearish_factors += 1
            else:
                bullish_factors += 1
                
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            if bullish_factors > bearish_factors:
                indicator = "üü¢ –ë—ã—á–∏–π"
            elif bearish_factors > bullish_factors:
                indicator = "üî¥ –ú–µ–¥–≤–µ–∂–∏–π"
            else:
                indicator = "‚ö™Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
                
            return {
                'indicator': indicator,
                'bullish_factors': bullish_factors,
                'bearish_factors': bearish_factors
            }
            
        except Exception as e:
            logger.error(f"Error in market analysis: {e}")
            return {
                'indicator': "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
                'bullish_factors': 0,
                'bearish_factors': 0
            }

# Create instance
market_analysis = MarketAnalysis() 