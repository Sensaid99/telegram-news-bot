from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.user_settings import UserSettings
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda c: c.data == "menu_settings")
async def show_settings_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    try:
        settings = UserSettings()
        user_settings = await settings.get_user_settings(callback.from_user.id)
        
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        text += "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        text += f"‚Ä¢ –¶–µ–Ω–∞: {'‚úÖ' if user_settings['notifications']['price'] else '‚ùå'}\n"
        text += f"‚Ä¢ –û–±—ä–µ–º: {'‚úÖ' if user_settings['notifications']['volume'] else '‚ùå'}\n"
        text += f"‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏: {'‚úÖ' if user_settings['notifications']['news'] else '‚ùå'}\n"
        text += f"‚Ä¢ –ö–∏—Ç—ã: {'‚úÖ' if user_settings['notifications']['whales'] else '‚ùå'}\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        text += "üì± –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n"
        text += f"‚Ä¢ –í–∞–ª—é—Ç–∞: {user_settings['display']['currency']}\n"
        text += f"‚Ä¢ –¢–∞–π–º–∑–æ–Ω–∞: {user_settings['display']['timezone']}\n"
        text += f"‚Ä¢ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {user_settings['display']['time_format']}\n\n"
        
        # –§–∏–ª—å—Ç—Ä—ã
        text += "üîç –§–∏–ª—å—Ç—Ä—ã:\n"
        text += f"‚Ä¢ –ú–∏–Ω. –æ–±—ä–µ–º: ${user_settings['filters']['min_volume']:,.0f}\n"
        text += f"‚Ä¢ –ú–∏–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {user_settings['filters']['min_change']}%\n"
        text += f"‚Ä¢ –ú–∏–Ω. —Å—É–º–º–∞ –∫–∏—Ç–∞: ${user_settings['filters']['min_whale']:,.0f}\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
        builder.button(text="üì± –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="settings_display")
        builder.button(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="settings_filters")
        builder.button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
        builder.adjust(2, 2)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in settings menu: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
            .as_markup()
        )

@router.callback_query(lambda c: c.data == "settings_notifications")
async def show_notifications_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        settings = UserSettings()
        notifications = await settings.get_notifications_settings(callback.from_user.id)
        
        text = "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        
        # –¶–µ–Ω–∞
        text += "üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ:\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ: {'‚úÖ' if notifications['price']['enabled'] else '‚ùå'}\n"
        text += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {notifications['price']['change']}%\n"
        text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {notifications['price']['interval']} –º–∏–Ω\n\n"
        
        # –û–±—ä–µ–º
        text += "üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—ä–µ–º–µ:\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ: {'‚úÖ' if notifications['volume']['enabled'] else '‚ùå'}\n"
        text += f"‚Ä¢ –ú–∏–Ω. –æ–±—ä–µ–º: ${notifications['volume']['min']:,.0f}\n"
        text += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {notifications['volume']['change']}%\n\n"
        
        # –ù–æ–≤–æ—Å—Ç–∏
        text += "üì∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö:\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ: {'‚úÖ' if notifications['news']['enabled'] else '‚ùå'}\n"
        text += f"‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å: {notifications['news']['importance']}\n"
        text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(notifications['news']['categories'])}\n\n"
        
        # –ö–∏—Ç—ã
        text += "üêã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∏—Ç–∞—Ö:\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ: {'‚úÖ' if notifications['whales']['enabled'] else '‚ùå'}\n"
        text += f"‚Ä¢ –ú–∏–Ω. —Å—É–º–º–∞: ${notifications['whales']['min']:,.0f}\n"
        text += f"‚Ä¢ –°–µ—Ç–∏: {', '.join(notifications['whales']['networks'])}"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ –¶–µ–Ω–∞", callback_data="notif_price")
        builder.button(text="üìä –û–±—ä–µ–º", callback_data="notif_volume")
        builder.button(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="notif_news")
        builder.button(text="üêã –ö–∏—Ç—ã", callback_data="notif_whales")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_settings")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in notifications settings: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_settings")
            .as_markup()
        )

@router.callback_query(lambda c: c.data == "settings_display")
async def show_display_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        settings = UserSettings()
        display = await settings.get_display_settings(callback.from_user.id)
        
        text = "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
        
        # –í–∞–ª—é—Ç–∞
        text += "üíµ –í–∞–ª—é—Ç–∞:\n"
        text += f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è: {display['currency']['main']}\n"
        text += f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è: {display['currency']['secondary']}\n\n"
        
        # –í—Ä–µ–º—è
        text += "üïí –í—Ä–µ–º—è:\n"
        text += f"‚Ä¢ –¢–∞–π–º–∑–æ–Ω–∞: {display['time']['timezone']}\n"
        text += f"‚Ä¢ –§–æ—Ä–º–∞—Ç: {display['time']['format']}\n\n"
        
        # –§–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª
        text += "üî¢ –§–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª:\n"
        text += f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: {display['numbers']['separator']}\n"
        text += f"‚Ä¢ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ: {display['numbers']['decimals']}\n\n"
        
        # –¢–µ–º–∞
        text += "üé® –¢–µ–º–∞:\n"
        text += f"‚Ä¢ –†–µ–∂–∏–º: {display['theme']['mode']}\n"
        text += f"‚Ä¢ –≠–º–æ–¥–∑–∏: {'‚úÖ' if display['theme']['emoji'] else '‚ùå'}"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üíµ –í–∞–ª—é—Ç–∞", callback_data="display_currency")
        builder.button(text="üïí –í—Ä–µ–º—è", callback_data="display_time")
        builder.button(text="üî¢ –ß–∏—Å–ª–∞", callback_data="display_numbers")
        builder.button(text="üé® –¢–µ–º–∞", callback_data="display_theme")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_settings")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in display settings: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_settings")
            .as_markup()
        )

@router.callback_query(lambda c: c.data == "settings_filters")
async def show_filter_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    try:
        settings = UserSettings()
        filters = await settings.get_filter_settings(callback.from_user.id)
        
        text = "üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
        
        # –û–±—ä–µ–º
        text += "üíé –§–∏–ª—å—Ç—Ä—ã –æ–±—ä–µ–º–∞:\n"
        text += f"‚Ä¢ –ú–∏–Ω. –æ–±—ä–µ–º: ${filters['volume']['min']:,.0f}\n"
        text += f"‚Ä¢ –ú–∏–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {filters['volume']['change']}%\n\n"
        
        # –¶–µ–Ω–∞
        text += "üí∞ –§–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã:\n"
        text += f"‚Ä¢ –ú–∏–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {filters['price']['change']}%\n"
        text += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {filters['price']['volatility']}\n\n"
        
        # –ö–∏—Ç—ã
        text += "üêã –§–∏–ª—å—Ç—Ä—ã –∫–∏—Ç–æ–≤:\n"
        text += f"‚Ä¢ –ú–∏–Ω. —Å—É–º–º–∞: ${filters['whales']['min']:,.0f}\n"
        text += f"‚Ä¢ –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {filters['whales']['types']}\n\n"
        
        # –ù–æ–≤–æ—Å—Ç–∏
        text += "üì∞ –§–∏–ª—å—Ç—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
        text += f"‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å: {filters['news']['importance']}\n"
        text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(filters['news']['categories'])}"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üíé –û–±—ä–µ–º", callback_data="filter_volume")
        builder.button(text="üí∞ –¶–µ–Ω–∞", callback_data="filter_price")
        builder.button(text="üêã –ö–∏—Ç—ã", callback_data="filter_whales")
        builder.button(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="filter_news")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_settings")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in filter settings: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_settings")
            .as_markup()
        ) 