import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.whale_watch import WhaleWatch
from services.macro_calendar import MacroCalendar
from services.blockchain_stats import BlockchainStats
from services.whale_tracker import WhaleTracker

logger = logging.getLogger(__name__)
router = Router()

whale_watcher = WhaleWatch()
macro_calendar = MacroCalendar()

def get_network_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="Bitcoin (BTC)", callback_data="whales_btc")
    builder.button(text="Ethereum (ETH)", callback_data="whales_eth")
    builder.button(text="Solana (SOL)", callback_data="whales_sol")
    builder.button(text="BNB Chain", callback_data="whales_bnb")
    builder.button(text="TRON (TRX)", callback_data="whales_trx")
    builder.button(text="TON", callback_data="whales_ton")
    builder.button(text="Ripple (XRP)", callback_data="whales_xrp")
    builder.button(text="SUI", callback_data="whales_sui")
    builder.button(text="USDT", callback_data="whales_usdt")
    builder.button(text="USDC", callback_data="whales_usdc")
    builder.button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    builder.adjust(2)
    return builder.as_markup()

def get_whale_menu_keyboard(network: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –∫–∏—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîç –ö—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data=f"whale_tx_{network}")
    builder.button(text="üìä –ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–π", callback_data=f"whale_analysis_{network}")
    builder.button(text="üîÑ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", callback_data=f"whale_correlation_{network}")
    builder.button(text="‚ö°Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å", callback_data=f"whale_track_{network}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ç—è–º", callback_data="menu_whales")
    builder.adjust(2)
    return builder.as_markup()

@router.message(Command("whales"))
async def cmd_whales(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–æ–≤."""
    await message.answer(
        "üêã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –∏–ª–∏ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_network_keyboard()
    )

@router.callback_query(lambda c: c.data == "menu_whales")
async def show_whales_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–æ–≤."""
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text="Bitcoin", callback_data="whales_btc")
        builder.button(text="Ethereum", callback_data="whales_eth")
        builder.button(text="BNB Chain", callback_data="whales_bnb")
        builder.button(text="Solana", callback_data="whales_sol")
        builder.button(text="TRON", callback_data="whales_trx")
        builder.button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
        builder.adjust(2, 2, 2)
        
        await callback.message.edit_text(
            "üêã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∏—Ç–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in whales menu: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
            .as_markup()
        )

@router.callback_query(lambda c: c.data.startswith("whales_"))
async def show_whale_activity(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏."""
    try:
        network = callback.data.split("_")[1].upper()
        await callback.answer(f"–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ {network}...")
        
        tracker = WhaleTracker()
        data = await tracker.get_whale_activity(network)
        
        text = f"üêã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤ | {network}\n\n"
        
        # –ö—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        text += "üí∞ –ö—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (24—á):\n"
        for tx in data['transactions'][:5]:  # –¢–æ–ø-5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            text += (
                f"‚Ä¢ ${tx['amount']:,.0f} | "
                f"{tx['from'][:8]}...{tx['from'][-8:]} ‚ûú "
                f"{tx['to'][:8]}...{tx['to'][-8:]}\n"
                f"  {tx['time']} | {tx['type']}\n\n"
            )
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∏—Ä–∂
        text += "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∏—Ä–∂:\n"
        text += f"‚Ä¢ –ü—Ä–∏—Ç–æ–∫: ${data['exchange_flow']['inflow']:,.0f}\n"
        text += f"‚Ä¢ –û—Ç—Ç–æ–∫: ${data['exchange_flow']['outflow']:,.0f}\n"
        text += f"‚Ä¢ –ù–µ—Ç—Ç–æ: ${data['exchange_flow']['net']:,.0f}\n\n"
        
        # –¢–æ–ø –∫–∏—Ç–æ–≤
        text += "üîù –¢–æ–ø –∫–∏—Ç–æ–≤:\n"
        for whale in data['top_whales'][:3]:  # –¢–æ–ø-3 –∫–∏—Ç–∞
            text += (
                f"‚Ä¢ {whale['address'][:8]}...{whale['address'][-8:]}\n"
                f"  –ë–∞–ª–∞–Ω—Å: ${whale['balance']:,.0f}\n"
                f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {whale['change_24h']:+.1f}%\n\n"
            )
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        text += "üìà –ú–µ—Ç—Ä–∏–∫–∏:\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${data['metrics']['avg_tx_size']:,.0f}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∏—Ç—ã: {data['metrics']['active_whales']}\n"
        text += f"‚Ä¢ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {data['metrics']['concentration']}%\n"
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"whales_{network.lower()}")
        builder.button(text="üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data=f"whales_chart_{network.lower()}")
        builder.button(text="‚ö°Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"whales_alert_{network.lower()}")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_whales")
        builder.adjust(2, 2)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing whale activity: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_whales")
            .as_markup()
        )

@router.callback_query(lambda c: c.data.startswith("whales_alert_"))
async def setup_whale_alerts(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö."""
    try:
        network = callback.data.split("_")[2].upper()
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data=f"whale_alert_amount_{network.lower()}")
        builder.button(text="üìä –û–±—ä–µ–º —Å–µ—Ç–∏", callback_data=f"whale_alert_volume_{network.lower()}")
        builder.button(text="üè¶ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∏—Ä–∂", callback_data=f"whale_alert_exchange_{network.lower()}")
        builder.button(text="üë• –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥—Ä–µ—Å", callback_data=f"whale_alert_address_{network.lower()}")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"whales_{network.lower()}")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            f"‚ö°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π | {network}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error setting up whale alerts: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"whales_{network.lower()}")
            .as_markup()
        )

@router.message(F.text.contains(":"))
async def handle_address_tracking(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤."""
    try:
        network, address = message.text.split(":")
        network = network.strip().upper()
        address = address.strip()
        
        if network not in ["BTC", "ETH", "BNB", "SOL", "TRX", "SUI", "TON", "XRP"]:
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑: BTC, ETH, BNB, SOL, TRX, SUI, TON, XRP",
                reply_markup=get_network_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥—Ä–µ—Å—É
        data = await whale_watcher.track_address(address, network)
        if not data:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥—Ä–µ—Å—É",
                reply_markup=get_network_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä –ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞ –≤ —Å–µ—Ç–∏ {network}:\n"
        report += f"–ê–¥—Ä–µ—Å: `{address}`\n\n"
        report += f"üí∏ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data['total_sent']:.2f}\n"
        report += f"üì• –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {data['total_received']:.2f}\n\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        report += "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
        for tx in data['transactions'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            report += f"{'‚¨ÜÔ∏è' if tx['type'] == 'out' else '‚¨áÔ∏è'} "
            report += f"{tx['amount']:.4f} {network}\n"
            report += f"üïí {tx['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
        await message.answer(
            report,
            reply_markup=get_network_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –°–ï–¢–¨:–ê–î–†–ï–°",
            reply_markup=get_network_keyboard()
        )
    except Exception as e:
        logger.error(f"Error tracking address: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞",
            reply_markup=get_network_keyboard()
        ) 