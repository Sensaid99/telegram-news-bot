from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.market_data import MarketData
from services.blockchain_stats import BlockchainStats
import logging

logger = logging.getLogger(__name__)
router = Router()

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="menu_market")
    builder.button(text="üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="menu_crypto")
    builder.button(text="üìà –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="menu_macro")
    builder.button(text="üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", callback_data="menu_tech")
    builder.button(text="üêã –ö–∏—Ç—ã", callback_data="menu_whales")
    builder.button(text="üìÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="menu_calendar")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")
    builder.adjust(2)
    return builder.as_markup()

def get_crypto_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
    builder = InlineKeyboardBuilder()
    builder.button(text="Bitcoin (BTC)", callback_data="crypto_btc")
    builder.button(text="Ethereum (ETH)", callback_data="crypto_eth")
    builder.button(text="Solana (SOL)", callback_data="crypto_sol")
    builder.button(text="BNB Chain", callback_data="crypto_bnb")
    builder.button(text="TRON (TRX)", callback_data="crypto_trx")
    builder.button(text="TON", callback_data="crypto_ton")
    builder.button(text="Ripple (XRP)", callback_data="crypto_xrp")
    builder.button(text="SUI", callback_data="crypto_sui")
    builder.button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    builder.adjust(2)
    return builder.as_markup()

@router.callback_query(lambda c: c.data.startswith("menu_"))
async def handle_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é."""
    menu_type = callback.data.split("_")[1]
    
    try:
        if menu_type == "main":
            await callback.message.edit_text(
                "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_keyboard()
            )
        elif menu_type == "crypto":
            await callback.message.edit_text(
                "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:",
                reply_markup=get_crypto_keyboard()
            )
        elif menu_type == "market":
            market = MarketData()
            volume_data = await market.get_market_volume()
            trends = await market.get_trending_coins()
            
            text = "üìä –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
            text += "üíé –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ (24—á):\n"
            for symbol, data in volume_data.items():
                text += (
                    f"‚Ä¢ {symbol}: ${data['volume']:,.0f}\n"
                    f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {data['volume_change']:+.1f}%\n"
                    f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {data['price_change']:+.1f}%\n"
                )
            
            text += f"\n{trends}"
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
            
            await callback.message.edit_text(
                text,
                reply_markup=builder.as_markup()
            )
        else:
            # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            messages = {
                "macro": "üìà –†–∞–∑–¥–µ–ª –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                "tech": "üìä –†–∞–∑–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                "whales": "üêã –†–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–∏—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                "calendar": "üìÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                "help": "‚ùì –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            }
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
            
            await callback.message.edit_text(
                messages.get(menu_type, "‚ö†Ô∏è –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"),
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"Error in menu handler: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
            .as_markup()
        )

async def get_crypto_info(symbol: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ."""
    try:
        market = MarketData()
        blockchain = BlockchainStats()
        
        if symbol == "BTC":
            data = await market.get_bitcoin_data()
            metrics = await blockchain.get_bitcoin_metrics()
            
            return (
                f"‚Çø Bitcoin (BTC)\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${data['price']:,.2f}\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {data['change_24h']:+.1f}%\n"
                f"üíé –û–±—ä–µ–º: ${data['volume_24h']:,.0f}\n\n"
                f"‚õì On-chain –º–µ—Ç—Ä–∏–∫–∏:\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: {metrics['active_addresses']:,}\n"
                f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (24—á): {metrics['transactions']:,}\n"
                f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {metrics['fee']} sat/vB (${metrics['fee_usd']:.2f})\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {metrics['avg_time']} –º–∏–Ω\n"
                f"‚Ä¢ –•–µ—à—Ä–µ–π—Ç: {metrics.get('hashrate', 'N/A')} EH/s\n"
            )
            
        elif symbol == "ETH":
            data = await market.get_ethereum_data()
            metrics = await blockchain.get_ethereum_metrics()
            
            return (
                f"Œû Ethereum (ETH)\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${data['price']:,.2f}\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {data['change_24h']:+.1f}%\n"
                f"üíé –û–±—ä–µ–º: ${data['volume_24h']:,.0f}\n\n"
                f"‚õì On-chain –º–µ—Ç—Ä–∏–∫–∏:\n"
                f"‚Ä¢ Gas: {metrics['gas']} gwei (${metrics['gas_usd']:.2f})\n"
                f"‚Ä¢ TVL: ${metrics['tvl']:,.0f}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: {metrics.get('active_addresses', 'N/A'):,}\n"
                f"‚Ä¢ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: {metrics.get('validators', 'N/A')}\n"
                f"‚Ä¢ TPS: {metrics.get('tps', 'N/A')}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {metrics['avg_time']} —Å–µ–∫\n"
            )
            
        elif symbol == "SOL":
            data = await market.get_solana_data()
            metrics = await blockchain.get_solana_metrics()
            
            return (
                f"‚ö°Ô∏è Solana (SOL)\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${data['price']:,.2f}\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {data['change_24h']:+.1f}%\n"
                f"üíé –û–±—ä–µ–º: ${data['volume_24h']:,.0f}\n\n"
                f"‚õì On-chain –º–µ—Ç—Ä–∏–∫–∏:\n"
                f"‚Ä¢ TPS: {metrics['tps']}\n"
                f"‚Ä¢ TVL: ${metrics['tvl']:,.0f}\n"
                f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {metrics['fee']} SOL (${metrics['fee_usd']:.4f})\n"
                f"‚Ä¢ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: {metrics.get('validators', 'N/A')}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {metrics['avg_time']} —Å–µ–∫\n"
            )
            
        elif symbol == "BNB":
            data = await market.get_bnb_data()
            metrics = await blockchain.get_bnb_metrics()
            
            return (
                f"üü° BNB Chain (BNB)\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${data['price']:,.2f}\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {data['change_24h']:+.1f}%\n"
                f"üíé –û–±—ä–µ–º: ${data['volume_24h']:,.0f}\n\n"
                f"‚õì On-chain –º–µ—Ç—Ä–∏–∫–∏:\n"
                f"‚Ä¢ Gas: {metrics['gas']} gwei (${metrics['gas_usd']:.4f})\n"
                f"‚Ä¢ TVL: ${metrics['tvl']:,.0f}\n"
                f"‚Ä¢ TPS: {metrics.get('tps', 'N/A')}\n"
                f"‚Ä¢ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: {metrics.get('validators', 'N/A')}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {metrics['avg_time']} —Å–µ–∫\n"
            )

        elif symbol == "TRX":
            data = await market.get_tron_data()
            metrics = await blockchain.get_tron_metrics()
            
            return (
                f"üî¥ TRON (TRX)\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${data['price']:,.4f}\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {data['change_24h']:+.1f}%\n"
                f"üíé –û–±—ä–µ–º: ${data['volume_24h']:,.0f}\n\n"
                f"‚õì On-chain –º–µ—Ç—Ä–∏–∫–∏:\n"
                f"‚Ä¢ TPS: {metrics['tps']}\n"
                f"‚Ä¢ TVL: ${metrics['tvl']:,.0f}\n"
                f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {metrics['fee']} TRX (${metrics['fee_usd']:.4f})\n"
                f"‚Ä¢ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: {metrics.get('validators', 'N/A')}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {metrics['avg_time']} —Å–µ–∫\n"
            )

        elif symbol == "TON":
            data = await market.get_ton_data()
            metrics = await blockchain.get_ton_metrics()
            
            return (
                f"üíé TON\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${data['price']:,.4f}\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {data['change_24h']:+.1f}%\n"
                f"üíé –û–±—ä–µ–º: ${data['volume_24h']:,.0f}\n\n"
                f"‚õì On-chain –º–µ—Ç—Ä–∏–∫–∏:\n"
                f"‚Ä¢ TPS: {metrics['tps']}\n"
                f"‚Ä¢ TVL: ${metrics['tvl']:,.0f}\n"
                f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {metrics['fee']} TON (${metrics['fee_usd']:.4f})\n"
                f"‚Ä¢ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: {metrics.get('validators', 'N/A')}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {metrics['avg_time']} —Å–µ–∫\n"
            )

        elif symbol == "XRP":
            data = await market.get_xrp_data()
            metrics = await blockchain.get_xrp_metrics()
            
            return (
                f"üåä Ripple (XRP)\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${data['price']:,.4f}\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {data['change_24h']:+.1f}%\n"
                f"üíé –û–±—ä–µ–º: ${data['volume_24h']:,.0f}\n\n"
                f"‚õì On-chain –º–µ—Ç—Ä–∏–∫–∏:\n"
                f"‚Ä¢ TPS: {metrics['tps']}\n"
                f"‚Ä¢ TVL: ${metrics['tvl']:,.0f}\n"
                f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {metrics['fee']} XRP (${metrics['fee_usd']:.4f})\n"
                f"‚Ä¢ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: {metrics.get('validators', 'N/A')}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {metrics['avg_time']} —Å–µ–∫\n"
            )

        elif symbol == "SUI":
            data = await market.get_sui_data()
            metrics = await blockchain.get_sui_metrics()
            
            return (
                f"üîµ SUI\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${data['price']:,.4f}\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á): {data['change_24h']:+.1f}%\n"
                f"üíé –û–±—ä–µ–º: ${data['volume_24h']:,.0f}\n\n"
                f"‚õì On-chain –º–µ—Ç—Ä–∏–∫–∏:\n"
                f"‚Ä¢ TPS: {metrics['tps']}\n"
                f"‚Ä¢ TVL: ${metrics['tvl']:,.0f}\n"
                f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {metrics['fee']} SUI (${metrics['fee_usd']:.4f})\n"
                f"‚Ä¢ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: {metrics.get('validators', 'N/A')}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {metrics['avg_time']} —Å–µ–∫\n"
            )

    except Exception as e:
        logger.error(f"Error getting {symbol} info: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}"

@router.callback_query(lambda c: c.data.startswith("crypto_"))
async def show_crypto_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ."""
    try:
        symbol = callback.data.split("_")[1].upper()
        await callback.answer(f"–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
        
        info = await get_crypto_info(symbol)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ì—Ä–∞—Ñ–∏–∫", callback_data=f"chart_{symbol.lower()}")
        builder.button(text="‚ö°Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"alert_{symbol.lower()}")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_crypto")
        builder.adjust(2)
        
        await callback.message.edit_text(
            text=info,
            reply_markup=builder.as_markup()
        )
        logger.info(f"Crypto info shown to user {callback.from_user.id} for {symbol}")
        
    except Exception as e:
        logger.error(f"Error in crypto menu: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_crypto")
            .as_markup()
        )

@router.callback_query(lambda c: c.data.startswith("chart_"))
async def show_chart(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."""
    try:
        symbol = callback.data.split("_")[1].upper()
        await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        chart_data = await technical.get_chart_data(symbol)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="1H", callback_data=f"timeframe_{symbol.lower()}_1h")
        builder.button(text="4H", callback_data=f"timeframe_{symbol.lower()}_4h")
        builder.button(text="1D", callback_data=f"timeframe_{symbol.lower()}_1d")
        builder.button(text="1W", callback_data=f"timeframe_{symbol.lower()}_1w")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"crypto_{symbol.lower()}")
        builder.adjust(4, 1)
        
        await callback.message.edit_text(
            text=chart_data['description'],
            reply_markup=builder.as_markup()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        if chart_data.get('image'):
            await callback.message.answer_photo(
                photo=chart_data['image'],
                caption=f"–ì—Ä–∞—Ñ–∏–∫ {symbol}/USDT"
            )
            
    except Exception as e:
        logger.error(f"Error showing chart: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"crypto_{symbol.lower()}")
            .as_markup()
        )

@router.callback_query(lambda c: c.data.startswith("alert_"))
async def setup_alert(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."""
    try:
        symbol = callback.data.split("_")[1].upper()
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –¶–µ–Ω–∞ –≤—ã—à–µ", callback_data=f"alert_price_above_{symbol.lower()}")
        builder.button(text="üìâ –¶–µ–Ω–∞ –Ω–∏–∂–µ", callback_data=f"alert_price_below_{symbol.lower()}")
        builder.button(text="üíπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ %", callback_data=f"alert_change_{symbol.lower()}")
        builder.button(text="üìä –û–±—ä–µ–º", callback_data=f"alert_volume_{symbol.lower()}")
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"crypto_{symbol.lower()}")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            f"‚ö°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {symbol}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error setting up alert: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"crypto_{symbol.lower()}")
            .as_markup()
        ) 