import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_session, User
from config import SUBSCRIPTION_PRICES

logger = logging.getLogger(__name__)

router = Router()

def get_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"–ú–µ—Å—è—Ü - {SUBSCRIPTION_PRICES['monthly']} ‚ÇΩ",
                    callback_data="subscribe_monthly"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"3 –º–µ—Å—è—Ü–∞ - {SUBSCRIPTION_PRICES['quarterly']} ‚ÇΩ",
                    callback_data="subscribe_quarterly"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–ì–æ–¥ - {SUBSCRIPTION_PRICES['yearly']} ‚ÇΩ",
                    callback_data="subscribe_yearly"
                )
            ]
        ]
    )
    return keyboard

@router.message(Command("subscribe"))
async def subscribe_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe."""
    try:
        subscription_text = """
üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ QuantNews

–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:
"""
        await message.reply(
            subscription_text,
            reply_markup=get_subscription_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in subscribe_command: {e}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("subscribe_"))
async def process_subscription(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    try:
        period = callback.data.split("_")[1]
        price = SUBSCRIPTION_PRICES.get(period)
        
        if not price:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏")
            return
            
        payment_text = f"""
üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏

–ü–µ—Ä–∏–æ–¥: {period}
–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ

–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ —Å—á–µ—Ç:
XXXX XXXX XXXX XXXX

–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID: {callback.from_user.id}
"""
        await callback.message.edit_text(
            payment_text,
            reply_markup=None
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in process_subscription: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Webhook handler for payment confirmation
async def process_payment_webhook(user_id: int, plan: str):
    session = get_session()
    user = session.query(User).filter(User.telegram_id == user_id).first()
    
    if user:
        duration = 365 if plan == "yearly" else 30
        user.is_premium = True
        user.subscription_end = datetime.utcnow() + timedelta(days=duration)
        session.commit()
        
        await bot.send_message(
            user_id,
            "üéâ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}"
        ) 