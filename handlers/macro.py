from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.macro_data import MacroData
from services.news_service import NewsService
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda c: c.data == "menu_macro")
async def show_macro_analysis(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑."""
    try:
        macro = MacroData()
        news = NewsService()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        indicators = await macro.get_indicators()
        market_impact = await macro.get_market_impact()
        news_data = await news.get_market_news()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        text = "üìä –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n\n"
        
        # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        text += "üìà –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:\n"
        text += f"‚Ä¢ S&P 500: {indicators['sp500']}\n"
        text += f"‚Ä¢ DXY: {indicators['dxy']}\n"
        text += f"‚Ä¢ Gold: {indicators['gold']}\n"
        text += f"‚Ä¢ Oil: {indicators['oil']}\n\n"
        
        # –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫
        text += "üéØ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫:\n"
        for factor, impact in market_impact.items():
            text += f"‚Ä¢ {factor}: {impact}\n"
        text += "\n"
        
        # –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        text += "üì∞ –ö–ª—é—á–µ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n"
        for news_item in news_data[:3]:  # –¢–æ–ø-3 –Ω–æ–≤–æ—Å—Ç–∏
            text += f"‚Ä¢ {news_item['title']}\n"
            text += f"  –í–ª–∏—è–Ω–∏–µ: {news_item['impact']}\n\n"
        
        # –ö–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="üì∞ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="macro_news")
        builder.button(text="üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", callback_data="macro_indicators")
        builder.button(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="macro_calendar")
        builder.button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
        builder.adjust(2, 2)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in macro analysis: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
            .as_markup()
        )

@router.callback_query(lambda c: c.data == "macro_news")
async def show_macro_news(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."""
    try:
        news = NewsService()
        news_data = await news.get_market_news()
        
        text = "üì∞ –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
        
        for news_item in news_data:
            text += f"üìå {news_item['title']}\n"
            text += f"üìä –í–ª–∏—è–Ω–∏–µ: {news_item['impact']}\n"
            text += f"üìù {news_item['summary']}\n\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_macro")
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing macro news: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_macro")
            .as_markup()
        )

@router.callback_query(lambda c: c.data == "macro_calendar")
async def show_economic_calendar(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
    try:
        macro = MacroData()
        calendar = await macro.get_economic_calendar()
        
        text = "üìÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n\n"
        
        for event in calendar:
            text += f"üïí {event['time']}\n"
            text += f"üìä {event['event']}\n"
            text += f"üåç {event['country']}\n"
            text += f"‚ö°Ô∏è –í–∞–∂–Ω–æ—Å—Ç—å: {event['importance']}\n"
            text += f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {event['forecast']}\n"
            text += f"üìä –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {event['previous']}\n\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_macro")
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing economic calendar: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_macro")
            .as_markup()
        ) 